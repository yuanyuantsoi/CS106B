#include <iostream>
#include "gevents.h"
#include "direction.h"
#include "maze.h"
#include "gwindow.h"
#include "point.h"
using namespace std;

/* constant */

const int NO_PATH = -1;

/* Function prototype */

Point adjacentPoint(Point start, Direction dir);
int shortestPathLength(Maze & maze, Point start);
int recFindPath(Maze & maze, Point start, int length);

int main() {
	GWindow gw;
	//Maze maze("Maze01.txt", gw);
	Maze maze("Maze03.txt", gw);
	Point start(0, 0);
	cout << "The shorteset length = " << shortestPathLength(maze, start) << endl;
	return 0;
}

int shortestPathLength(Maze & maze, Point start) {
	return recFindPath(maze, start, 0);
}

int recFindPath(Maze & maze, Point start, int length) {
	if (maze.isOutside(start)) return length;
	if (maze.isMarked(start)) return NO_PATH;
	maze.markSquare(start);
	for (Direction dir = NORTH; dir <= WEST; dir++) {
		if (!maze.wallExists(start, dir)) {
			int minLen = recFindPath(maze, adjacentPoint(start, dir), length + 1);
			if (minLen != NO_PATH) return minLen;
		}
	}
	maze.unmarkSquare(start);
	return NO_PATH;
}

Point adjacentPoint(Point start, Direction dir) {
	switch (dir) {
		case NORTH: return Point(start.getX(), start.getY() - 1);
		case EAST:  return Point(start.getX() + 1, start.getY());
		case SOUTH: return Point(start.getX(), start.getY() + 1);
		case WEST:  return Point(start.getX(), start.getY());
	}
	return start;
}
		
